

// # Save images from server
// -----------------------------------

var downloadTimePerPage = .128;
var downloadEstimatedTime = Math.floor((2 + bookData.pages.length)*downloadTimePerPage);

alert(
    "画像ダウンロードを開始します"
    + "（約" + downloadEstimatedTime + "秒)\n\n"
    + "以下の画像を"
    + bookAssetsPath
    + "にDLします。\n\n"
    + "- " + "ブックカバー写真\n"
    + "- " + "ブックのQR画像\n"
    + "- " + bookData.pages.length + '枚のページ写真'
);

// Save bookcover image
var bookCoverImageUrl = bookData.book.imageURL;
var bookCoverImageTitle = bookAssetsPath + bookId + "-bookCover.jpg";
var f = downloadFile(bookCoverImageUrl, bookCoverImageTitle);

// Save book QR image
var bookQRImageUrl = bookData.book.qrImageURL;
var bookQRImageTitle = bookAssetsPath + bookId + "-bookQR.jpg";
var f = downloadFile(bookQRImageUrl, bookQRImageTitle);
var i, pageImageUrl, pageImageTitle;


// # TODO
// Save poin logo on your local directory for the book cover back


// Save page images
for (i = 0; i < bookData.pages.length; i++) {
    pageImageUrl = bookData.pages[i].imageURL;
    pageImageTitle = bookAssetsPath + bookId + "-page-" + i + ".jpg";
    f = downloadFile(pageImageUrl, pageImageTitle);
}

alert(
    "画像ダウンロードが完了しました\n"
    + "以下の画像を"
    + bookAssetsPath
    + "にDLしました。\n\n"
    + "- " + "ブックカバー写真\n"
    + "- " + "ブックのQR画像\n"
    + "- " + bookData.pages.length + '枚のページ写真\n\n'
    + 'これより、文字・写真データをレイアウトに流し込みます。'
);

//HTTPレスポンスを得る
function getHttpResponse(requests) {
    var parseUrl = function(url) {
        var urlObj = {};
        //[url, scheme, slash, host, port, path, query, fragment] via O'REILLY JavaScript: The Good Parts
        var url_re = /^(?:([A-Za-z]+):)?(\/{0,3})([0-9.\-A-Za-z]+)(?::(\d+))?(?:\/([^?#]*))?(?:\?([^#]*))?(?:#(.*))?$/;
        var m = url_re.exec(url);
        urlObj.host = m[3];
        urlObj.port = m[4] || '80';
        urlObj.path = m[5];
        urlObj.query = (m[6]) ? '?' +  m[6] : '';
        urlObj.frag = (m[7]) ? '#' + m[7] : '';
        return urlObj;
    }
    var urlObj = parseUrl(requests.url);
    var encoding = requests.encoding || 'UTF-8';
    var method = requests.method || 'GET';
    var auth = (requests.basic_auth != undefined) ? 'Authorization: Basic ' + requests.basic_auth + '\r\n' : '';
    var conn = new Socket;
    conn.timeout = 10;
    if (conn.open (urlObj.host + ':' + urlObj.port, encoding)) {
　　  conn.write (method + ' /' + urlObj.path + urlObj.query + urlObj.frag + ' HTTP/1.0\r\n'
        + 'Host: ' + urlObj.host + '\r\n'
        + 'User-Agent: ' + 'InDesign/6.0' + '(Macintosh; U; Intel Mac OS X 10_5_6; ja-jp)' + '\r\n'
        + auth
        + '\r\n');
        var reply = conn.read(999999);
        conn.close();
        return reply; //ヘッダ込みで返す
    } else {
        return conn.error;
    }
}

//Webからファイルをダウンロードする
function downloadFile(url, localFile) {
    var rep = getHttpResponse({
        method: 'GET',
        url: url,
        encoding: 'BINARY',
    });
    if (rep.match(/HTTP.*\d{3}/).toString().indexOf('200') != -1) {
        //レスポンスのヘッダを除去
        var body = rep.slice(rep.indexOf('\r\n\r\n') + 4);
        //ファイルに書き出し
        var f = new File(localFile);
        if (f.open("w")) {
            f.encoding = 'BINARY';
            f.write(body);
        }
        f.close();
        return f;
    } else {
        return false;
    }
}
